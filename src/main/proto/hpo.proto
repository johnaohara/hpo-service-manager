// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";


option java_multiple_files = true;
option java_package = "io.kruize.hpo";
option java_outer_classname = "Hpo";
option objc_class_prefix = "HLW";

package helloworld;

// The hpo service definition.
service HpoService {
  rpc NumberExperiments(NumberExperimentsParams) returns (NumberExperimentsReply) {}
  rpc ExperimentsList(ExperimentsListParams) returns (ExperimentsListReply) {}
  rpc NewExperiment(ExperimentDetails) returns (NewExperimentsReply) {}
  rpc GetExperimentDetails(ExperimentNameParams) returns (ExperimentDetails) {}
  rpc GetTrialConfig(ExperimentTrial) returns (TrialConfig) {}
  rpc UpdateTrialResult(ExperimentTrialResult) returns (ExperimentTrialReply) {}
  rpc GenerateNextConfig(ExperimentNameParams) returns (NewExperimentsReply) {}
}

message NumberExperimentsReply {
  int32 count = 1;
}

message NewExperimentsReply {
  int32 trial_number = 1;
}

message ExperimentsListReply {
  repeated string experiment = 1;
}

message NumberExperimentsParams {}

message ExperimentsListParams {}

message ExperimentTrialReply{}

message ExperimentNameParams {
  string experiment_name = 1;
}

message ExperimentTrial {
  string experiment_name = 1;
  int32 trial = 2;
}

message ExperimentTrialResult{
  enum Result {
    SUCCESS = 0;
    FAILURE = 1;
    PRUNE = 2;
  }

  string experiment_name = 1;
  int32 trial = 2;
  Result result = 3;
  string value_type = 4;
  double value = 5;
}

message ExperimentDetails {
  message Tunable{
      string value_type = 1;
      int32 lower_bound = 2;
      string name = 3;
      int32 upper_bound = 4;
      double step = 5;
  }

  string experiment_name = 1;
  int32 total_trials = 2;
  int32 parallel_trials = 3;
  string direction = 4;
  string hpo_algo_impl = 5;
  string experiment_id = 6;
  string objective_function= 7;
  repeated Tunable tuneables = 8;
  string value_type= 9;
  string slo_class = 10;
  bool started = 11;
}

message TunableConfig {
  string name = 1;
  float value = 2;
}

message TrialConfig {
  repeated TunableConfig config = 1;
}


